/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 63.0, "minX": 0.0, "maxY": 73137.0, "series": [{"data": [[0.0, 63.0], [0.1, 66.0], [0.2, 91.0], [0.3, 159.0], [0.4, 161.0], [0.5, 166.0], [0.6, 172.0], [0.7, 175.0], [0.8, 179.0], [0.9, 180.0], [1.0, 181.0], [1.1, 182.0], [1.2, 182.0], [1.3, 198.0], [1.4, 199.0], [1.5, 220.0], [1.6, 242.0], [1.7, 244.0], [1.8, 265.0], [1.9, 270.0], [2.0, 275.0], [2.1, 277.0], [2.2, 282.0], [2.3, 286.0], [2.4, 292.0], [2.5, 296.0], [2.6, 297.0], [2.7, 298.0], [2.8, 298.0], [2.9, 299.0], [3.0, 300.0], [3.1, 301.0], [3.2, 302.0], [3.3, 303.0], [3.4, 305.0], [3.5, 308.0], [3.6, 310.0], [3.7, 311.0], [3.8, 311.0], [3.9, 311.0], [4.0, 314.0], [4.1, 318.0], [4.2, 319.0], [4.3, 321.0], [4.4, 322.0], [4.5, 324.0], [4.6, 324.0], [4.7, 328.0], [4.8, 329.0], [4.9, 330.0], [5.0, 331.0], [5.1, 331.0], [5.2, 333.0], [5.3, 333.0], [5.4, 334.0], [5.5, 335.0], [5.6, 340.0], [5.7, 346.0], [5.8, 348.0], [5.9, 351.0], [6.0, 352.0], [6.1, 354.0], [6.2, 360.0], [6.3, 379.0], [6.4, 396.0], [6.5, 397.0], [6.6, 405.0], [6.7, 426.0], [6.8, 678.0], [6.9, 1556.0], [7.0, 1597.0], [7.1, 2097.0], [7.2, 3198.0], [7.3, 5871.0], [7.4, 6450.0], [7.5, 6497.0], [7.6, 6512.0], [7.7, 6554.0], [7.8, 6566.0], [7.9, 6616.0], [8.0, 6620.0], [8.1, 6622.0], [8.2, 6648.0], [8.3, 6649.0], [8.4, 6667.0], [8.5, 6671.0], [8.6, 6674.0], [8.7, 6675.0], [8.8, 6688.0], [8.9, 6692.0], [9.0, 6695.0], [9.1, 6695.0], [9.2, 6700.0], [9.3, 6712.0], [9.4, 6715.0], [9.5, 6717.0], [9.6, 6723.0], [9.7, 6730.0], [9.8, 6733.0], [9.9, 6739.0], [10.0, 6757.0], [10.1, 6807.0], [10.2, 6828.0], [10.3, 6842.0], [10.4, 6848.0], [10.5, 6849.0], [10.6, 6849.0], [10.7, 6858.0], [10.8, 6858.0], [10.9, 6871.0], [11.0, 6873.0], [11.1, 6873.0], [11.2, 6906.0], [11.3, 6910.0], [11.4, 6914.0], [11.5, 6921.0], [11.6, 6924.0], [11.7, 6934.0], [11.8, 6938.0], [11.9, 6942.0], [12.0, 6948.0], [12.1, 6955.0], [12.2, 6963.0], [12.3, 6971.0], [12.4, 6972.0], [12.5, 6978.0], [12.6, 6984.0], [12.7, 6986.0], [12.8, 6987.0], [12.9, 6988.0], [13.0, 6993.0], [13.1, 6994.0], [13.2, 7000.0], [13.3, 7002.0], [13.4, 7014.0], [13.5, 7015.0], [13.6, 7016.0], [13.7, 7022.0], [13.8, 7036.0], [13.9, 7037.0], [14.0, 7038.0], [14.1, 7043.0], [14.2, 7049.0], [14.3, 7055.0], [14.4, 7056.0], [14.5, 7058.0], [14.6, 7063.0], [14.7, 7086.0], [14.8, 7088.0], [14.9, 7090.0], [15.0, 7093.0], [15.1, 7104.0], [15.2, 7109.0], [15.3, 7147.0], [15.4, 7192.0], [15.5, 7213.0], [15.6, 7309.0], [15.7, 7357.0], [15.8, 7435.0], [15.9, 7442.0], [16.0, 7478.0], [16.1, 8415.0], [16.2, 9382.0], [16.3, 12065.0], [16.4, 12396.0], [16.5, 12419.0], [16.6, 12450.0], [16.7, 12584.0], [16.8, 12597.0], [16.9, 12657.0], [17.0, 12673.0], [17.1, 12676.0], [17.2, 12682.0], [17.3, 12685.0], [17.4, 12700.0], [17.5, 12709.0], [17.6, 12903.0], [17.7, 12930.0], [17.8, 12973.0], [17.9, 12985.0], [18.0, 12987.0], [18.1, 12990.0], [18.2, 12998.0], [18.3, 13002.0], [18.4, 13004.0], [18.5, 13006.0], [18.6, 13008.0], [18.7, 13011.0], [18.8, 13026.0], [18.9, 13033.0], [19.0, 13042.0], [19.1, 13043.0], [19.2, 13044.0], [19.3, 13044.0], [19.4, 13047.0], [19.5, 13047.0], [19.6, 13048.0], [19.7, 13052.0], [19.8, 13059.0], [19.9, 13063.0], [20.0, 13064.0], [20.1, 13079.0], [20.2, 13092.0], [20.3, 13099.0], [20.4, 13114.0], [20.5, 13115.0], [20.6, 13137.0], [20.7, 13144.0], [20.8, 13145.0], [20.9, 13154.0], [21.0, 13167.0], [21.1, 13172.0], [21.2, 13172.0], [21.3, 13175.0], [21.4, 13176.0], [21.5, 13179.0], [21.6, 13180.0], [21.7, 13180.0], [21.8, 13186.0], [21.9, 13186.0], [22.0, 13188.0], [22.1, 13189.0], [22.2, 13193.0], [22.3, 13201.0], [22.4, 13202.0], [22.5, 13203.0], [22.6, 13210.0], [22.7, 13211.0], [22.8, 13212.0], [22.9, 13220.0], [23.0, 13226.0], [23.1, 13230.0], [23.2, 13238.0], [23.3, 13265.0], [23.4, 13325.0], [23.5, 13393.0], [23.6, 13400.0], [23.7, 13405.0], [23.8, 13431.0], [23.9, 13447.0], [24.0, 13558.0], [24.1, 13583.0], [24.2, 13607.0], [24.3, 13619.0], [24.4, 13802.0], [24.5, 13811.0], [24.6, 13835.0], [24.7, 13847.0], [24.8, 13849.0], [24.9, 13853.0], [25.0, 13873.0], [25.1, 13884.0], [25.2, 13929.0], [25.3, 13954.0], [25.4, 14070.0], [25.5, 14152.0], [25.6, 15175.0], [25.7, 15923.0], [25.8, 16691.0], [25.9, 16711.0], [26.0, 18340.0], [26.1, 18625.0], [26.2, 18717.0], [26.3, 18742.0], [26.4, 18773.0], [26.5, 18795.0], [26.6, 18795.0], [26.7, 18798.0], [26.8, 18830.0], [26.9, 18832.0], [27.0, 18833.0], [27.1, 18862.0], [27.2, 18890.0], [27.3, 18890.0], [27.4, 18893.0], [27.5, 18935.0], [27.6, 18943.0], [27.7, 18943.0], [27.8, 18959.0], [27.9, 18972.0], [28.0, 18977.0], [28.1, 18979.0], [28.2, 18983.0], [28.3, 18986.0], [28.4, 18991.0], [28.5, 19000.0], [28.6, 19000.0], [28.7, 19001.0], [28.8, 19004.0], [28.9, 19010.0], [29.0, 19025.0], [29.1, 19025.0], [29.2, 19033.0], [29.3, 19036.0], [29.4, 19039.0], [29.5, 19048.0], [29.6, 19052.0], [29.7, 19055.0], [29.8, 19056.0], [29.9, 19058.0], [30.0, 19063.0], [30.1, 19081.0], [30.2, 19086.0], [30.3, 19105.0], [30.4, 19130.0], [30.5, 19136.0], [30.6, 19143.0], [30.7, 19152.0], [30.8, 19247.0], [30.9, 19249.0], [31.0, 19264.0], [31.1, 19274.0], [31.2, 19274.0], [31.3, 19278.0], [31.4, 19284.0], [31.5, 19291.0], [31.6, 19294.0], [31.7, 19300.0], [31.8, 19303.0], [31.9, 19309.0], [32.0, 19328.0], [32.1, 19334.0], [32.2, 19344.0], [32.3, 19353.0], [32.4, 19368.0], [32.5, 19377.0], [32.6, 19383.0], [32.7, 19394.0], [32.8, 19466.0], [32.9, 19531.0], [33.0, 19534.0], [33.1, 19547.0], [33.2, 19572.0], [33.3, 20015.0], [33.4, 20050.0], [33.5, 20065.0], [33.6, 20087.0], [33.7, 20142.0], [33.8, 20274.0], [33.9, 20347.0], [34.0, 20352.0], [34.1, 20354.0], [34.2, 20711.0], [34.3, 21729.0], [34.4, 21732.0], [34.5, 21778.0], [34.6, 21787.0], [34.7, 21834.0], [34.8, 22259.0], [34.9, 23544.0], [35.0, 24217.0], [35.1, 24235.0], [35.2, 24338.0], [35.3, 24381.0], [35.4, 24412.0], [35.5, 24554.0], [35.6, 25041.0], [35.7, 25045.0], [35.8, 25095.0], [35.9, 25103.0], [36.0, 25144.0], [36.1, 25162.0], [36.2, 25174.0], [36.3, 25220.0], [36.4, 25232.0], [36.5, 25240.0], [36.6, 25260.0], [36.7, 25275.0], [36.8, 25275.0], [36.9, 25285.0], [37.0, 25305.0], [37.1, 25310.0], [37.2, 25326.0], [37.3, 25336.0], [37.4, 25336.0], [37.5, 25339.0], [37.6, 25342.0], [37.7, 25347.0], [37.8, 25348.0], [37.9, 25353.0], [38.0, 25356.0], [38.1, 25365.0], [38.2, 25375.0], [38.3, 25377.0], [38.4, 25392.0], [38.5, 25398.0], [38.6, 25411.0], [38.7, 25420.0], [38.8, 25423.0], [38.9, 25425.0], [39.0, 25431.0], [39.1, 25443.0], [39.2, 25460.0], [39.3, 25469.0], [39.4, 25471.0], [39.5, 25485.0], [39.6, 25485.0], [39.7, 25489.0], [39.8, 25516.0], [39.9, 25528.0], [40.0, 25533.0], [40.1, 25553.0], [40.2, 25562.0], [40.3, 25565.0], [40.4, 25575.0], [40.5, 25598.0], [40.6, 25619.0], [40.7, 25640.0], [40.8, 25643.0], [40.9, 25646.0], [41.0, 25648.0], [41.1, 25648.0], [41.2, 25664.0], [41.3, 25711.0], [41.4, 25734.0], [41.5, 25735.0], [41.6, 25758.0], [41.7, 25862.0], [41.8, 25863.0], [41.9, 25867.0], [42.0, 25867.0], [42.1, 25938.0], [42.2, 25948.0], [42.3, 26060.0], [42.4, 26200.0], [42.5, 26213.0], [42.6, 26401.0], [42.7, 26592.0], [42.8, 26890.0], [42.9, 27018.0], [43.0, 27310.0], [43.1, 27633.0], [43.2, 27933.0], [43.3, 27960.0], [43.4, 28235.0], [43.5, 28322.0], [43.6, 28397.0], [43.7, 28530.0], [43.8, 30084.0], [43.9, 30939.0], [44.0, 30949.0], [44.1, 31086.0], [44.2, 31088.0], [44.3, 31111.0], [44.4, 31509.0], [44.5, 31640.0], [44.6, 31708.0], [44.7, 31789.0], [44.8, 31802.0], [44.9, 31810.0], [45.0, 31811.0], [45.1, 31820.0], [45.2, 31821.0], [45.3, 31823.0], [45.4, 31834.0], [45.5, 31839.0], [45.6, 31842.0], [45.7, 31846.0], [45.8, 31851.0], [45.9, 31856.0], [46.0, 31861.0], [46.1, 31863.0], [46.2, 31868.0], [46.3, 31873.0], [46.4, 31875.0], [46.5, 31882.0], [46.6, 31892.0], [46.7, 31893.0], [46.8, 31902.0], [46.9, 31906.0], [47.0, 31926.0], [47.1, 31930.0], [47.2, 31931.0], [47.3, 31942.0], [47.4, 31945.0], [47.5, 31949.0], [47.6, 31963.0], [47.7, 31993.0], [47.8, 32010.0], [47.9, 32028.0], [48.0, 32030.0], [48.1, 32033.0], [48.2, 32038.0], [48.3, 32038.0], [48.4, 32042.0], [48.5, 32047.0], [48.6, 32076.0], [48.7, 32077.0], [48.8, 32089.0], [48.9, 32090.0], [49.0, 32094.0], [49.1, 32094.0], [49.2, 32100.0], [49.3, 32100.0], [49.4, 32100.0], [49.5, 32101.0], [49.6, 32105.0], [49.7, 32123.0], [49.8, 32140.0], [49.9, 32145.0], [50.0, 32149.0], [50.1, 32181.0], [50.2, 32181.0], [50.3, 32227.0], [50.4, 32304.0], [50.5, 32369.0], [50.6, 32387.0], [50.7, 32482.0], [50.8, 32579.0], [50.9, 32661.0], [51.0, 32682.0], [51.1, 32685.0], [51.2, 32689.0], [51.3, 32784.0], [51.4, 32796.0], [51.5, 32823.0], [51.6, 32825.0], [51.7, 33081.0], [51.8, 33165.0], [51.9, 33388.0], [52.0, 33596.0], [52.1, 33784.0], [52.2, 34050.0], [52.3, 34247.0], [52.4, 34395.0], [52.5, 34479.0], [52.6, 34753.0], [52.7, 36067.0], [52.8, 36173.0], [52.9, 36967.0], [53.0, 37644.0], [53.1, 37665.0], [53.2, 37723.0], [53.3, 37729.0], [53.4, 37731.0], [53.5, 37747.0], [53.6, 37754.0], [53.7, 37756.0], [53.8, 37769.0], [53.9, 37770.0], [54.0, 37782.0], [54.1, 37783.0], [54.2, 37791.0], [54.3, 37791.0], [54.4, 37797.0], [54.5, 37799.0], [54.6, 37799.0], [54.7, 37800.0], [54.8, 37808.0], [54.9, 37808.0], [55.0, 37814.0], [55.1, 37828.0], [55.2, 37830.0], [55.3, 37833.0], [55.4, 37835.0], [55.5, 37836.0], [55.6, 37848.0], [55.7, 37863.0], [55.8, 37864.0], [55.9, 37870.0], [56.0, 37871.0], [56.1, 37872.0], [56.2, 37937.0], [56.3, 37973.0], [56.4, 38268.0], [56.5, 38306.0], [56.6, 38318.0], [56.7, 38319.0], [56.8, 38327.0], [56.9, 38336.0], [57.0, 38339.0], [57.1, 38355.0], [57.2, 38359.0], [57.3, 38374.0], [57.4, 38390.0], [57.5, 38396.0], [57.6, 38457.0], [57.7, 38554.0], [57.8, 38570.0], [57.9, 38584.0], [58.0, 38669.0], [58.1, 38740.0], [58.2, 38742.0], [58.3, 38784.0], [58.4, 38800.0], [58.5, 38812.0], [58.6, 38819.0], [58.7, 38820.0], [58.8, 38840.0], [58.9, 38857.0], [59.0, 38860.0], [59.1, 38861.0], [59.2, 38864.0], [59.3, 38865.0], [59.4, 38872.0], [59.5, 38898.0], [59.6, 38901.0], [59.7, 38903.0], [59.8, 38912.0], [59.9, 38918.0], [60.0, 38923.0], [60.1, 38946.0], [60.2, 38948.0], [60.3, 38995.0], [60.4, 39052.0], [60.5, 39077.0], [60.6, 39159.0], [60.7, 39241.0], [60.8, 39250.0], [60.9, 39270.0], [61.0, 39568.0], [61.1, 39875.0], [61.2, 40044.0], [61.3, 40382.0], [61.4, 40491.0], [61.5, 40563.0], [61.6, 40683.0], [61.7, 42017.0], [61.8, 42130.0], [61.9, 43107.0], [62.0, 43605.0], [62.1, 43687.0], [62.2, 43730.0], [62.3, 43764.0], [62.4, 43769.0], [62.5, 43779.0], [62.6, 43790.0], [62.7, 43798.0], [62.8, 43799.0], [62.9, 43803.0], [63.0, 43820.0], [63.1, 43825.0], [63.2, 43828.0], [63.3, 43837.0], [63.4, 43843.0], [63.5, 43859.0], [63.6, 43859.0], [63.7, 43884.0], [63.8, 43899.0], [63.9, 43901.0], [64.0, 43916.0], [64.1, 43921.0], [64.2, 43924.0], [64.3, 43932.0], [64.4, 43942.0], [64.5, 43954.0], [64.6, 43968.0], [64.7, 43969.0], [64.8, 43981.0], [64.9, 43986.0], [65.0, 43991.0], [65.1, 44006.0], [65.2, 44018.0], [65.3, 44241.0], [65.4, 44364.0], [65.5, 44393.0], [65.6, 44440.0], [65.7, 44446.0], [65.8, 44472.0], [65.9, 44512.0], [66.0, 44516.0], [66.1, 44526.0], [66.2, 44631.0], [66.3, 44646.0], [66.4, 44647.0], [66.5, 44654.0], [66.6, 44707.0], [66.7, 44768.0], [66.8, 44880.0], [66.9, 44886.0], [67.0, 44902.0], [67.1, 44902.0], [67.2, 44907.0], [67.3, 44911.0], [67.4, 44915.0], [67.5, 44923.0], [67.6, 44943.0], [67.7, 44946.0], [67.8, 44947.0], [67.9, 44959.0], [68.0, 44967.0], [68.1, 44991.0], [68.2, 45013.0], [68.3, 45025.0], [68.4, 45097.0], [68.5, 45098.0], [68.6, 45106.0], [68.7, 45112.0], [68.8, 45877.0], [68.9, 45894.0], [69.0, 45897.0], [69.1, 45920.0], [69.2, 45923.0], [69.3, 45932.0], [69.4, 45962.0], [69.5, 45972.0], [69.6, 46187.0], [69.7, 46199.0], [69.8, 46220.0], [69.9, 46601.0], [70.0, 46639.0], [70.1, 46734.0], [70.2, 46746.0], [70.3, 46766.0], [70.4, 46793.0], [70.5, 46901.0], [70.6, 46957.0], [70.7, 48122.0], [70.8, 48163.0], [70.9, 48983.0], [71.0, 49516.0], [71.1, 49516.0], [71.2, 49519.0], [71.3, 49540.0], [71.4, 49543.0], [71.5, 49544.0], [71.6, 49553.0], [71.7, 49565.0], [71.8, 49565.0], [71.9, 49581.0], [72.0, 49589.0], [72.1, 49610.0], [72.2, 49613.0], [72.3, 49640.0], [72.4, 49644.0], [72.5, 49645.0], [72.6, 49683.0], [72.7, 49705.0], [72.8, 49711.0], [72.9, 49734.0], [73.0, 49736.0], [73.1, 49748.0], [73.2, 49757.0], [73.3, 49776.0], [73.4, 49801.0], [73.5, 49803.0], [73.6, 49806.0], [73.7, 49806.0], [73.8, 49850.0], [73.9, 49873.0], [74.0, 49878.0], [74.1, 49940.0], [74.2, 49949.0], [74.3, 50003.0], [74.4, 50012.0], [74.5, 50347.0], [74.6, 50462.0], [74.7, 50470.0], [74.8, 50517.0], [74.9, 50521.0], [75.0, 50551.0], [75.1, 50629.0], [75.2, 50663.0], [75.3, 50663.0], [75.4, 50701.0], [75.5, 50765.0], [75.6, 50828.0], [75.7, 50832.0], [75.8, 50858.0], [75.9, 50868.0], [76.0, 50888.0], [76.1, 50892.0], [76.2, 50892.0], [76.3, 50916.0], [76.4, 50930.0], [76.5, 50939.0], [76.6, 50945.0], [76.7, 50966.0], [76.8, 50978.0], [76.9, 50989.0], [77.0, 50993.0], [77.1, 51002.0], [77.2, 51032.0], [77.3, 51045.0], [77.4, 51062.0], [77.5, 51065.0], [77.6, 51240.0], [77.7, 51240.0], [77.8, 51506.0], [77.9, 51570.0], [78.0, 51731.0], [78.1, 51776.0], [78.2, 51870.0], [78.3, 51935.0], [78.4, 52040.0], [78.5, 52055.0], [78.6, 52061.0], [78.7, 52137.0], [78.8, 52262.0], [78.9, 52872.0], [79.0, 52958.0], [79.1, 54201.0], [79.2, 54297.0], [79.3, 54867.0], [79.4, 54977.0], [79.5, 55216.0], [79.6, 55288.0], [79.7, 55315.0], [79.8, 55415.0], [79.9, 55518.0], [80.0, 55520.0], [80.1, 55615.0], [80.2, 55626.0], [80.3, 55685.0], [80.4, 55702.0], [80.5, 55752.0], [80.6, 55810.0], [80.7, 55811.0], [80.8, 55840.0], [80.9, 55856.0], [81.0, 55873.0], [81.1, 55890.0], [81.2, 55895.0], [81.3, 55906.0], [81.4, 55925.0], [81.5, 55942.0], [81.6, 55946.0], [81.7, 55948.0], [81.8, 55951.0], [81.9, 55954.0], [82.0, 55956.0], [82.1, 55972.0], [82.2, 55990.0], [82.3, 55993.0], [82.4, 56002.0], [82.5, 56022.0], [82.6, 56045.0], [82.7, 56063.0], [82.8, 56077.0], [82.9, 56079.0], [83.0, 56096.0], [83.1, 56100.0], [83.2, 56113.0], [83.3, 56144.0], [83.4, 56283.0], [83.5, 56341.0], [83.6, 56353.0], [83.7, 56362.0], [83.8, 56388.0], [83.9, 56395.0], [84.0, 56416.0], [84.1, 56457.0], [84.2, 56478.0], [84.3, 56491.0], [84.4, 56495.0], [84.5, 56498.0], [84.6, 56525.0], [84.7, 56530.0], [84.8, 56531.0], [84.9, 56559.0], [85.0, 56560.0], [85.1, 56568.0], [85.2, 56577.0], [85.3, 56577.0], [85.4, 56579.0], [85.5, 56598.0], [85.6, 56599.0], [85.7, 56605.0], [85.8, 56611.0], [85.9, 56641.0], [86.0, 56656.0], [86.1, 56656.0], [86.2, 56667.0], [86.3, 56686.0], [86.4, 56700.0], [86.5, 56709.0], [86.6, 56718.0], [86.7, 56741.0], [86.8, 56762.0], [86.9, 56773.0], [87.0, 56775.0], [87.1, 56779.0], [87.2, 56786.0], [87.3, 56809.0], [87.4, 56814.0], [87.5, 56818.0], [87.6, 56842.0], [87.7, 56854.0], [87.8, 56855.0], [87.9, 56862.0], [88.0, 57106.0], [88.1, 57147.0], [88.2, 57156.0], [88.3, 57158.0], [88.4, 57186.0], [88.5, 57244.0], [88.6, 57260.0], [88.7, 57273.0], [88.8, 57324.0], [88.9, 57452.0], [89.0, 70553.0], [89.1, 70733.0], [89.2, 70743.0], [89.3, 70836.0], [89.4, 70849.0], [89.5, 70851.0], [89.6, 70880.0], [89.7, 70882.0], [89.8, 70883.0], [89.9, 70908.0], [90.0, 70940.0], [90.1, 70955.0], [90.2, 70965.0], [90.3, 70967.0], [90.4, 70982.0], [90.5, 70984.0], [90.6, 71010.0], [90.7, 71012.0], [90.8, 71037.0], [90.9, 71045.0], [91.0, 71053.0], [91.1, 71061.0], [91.2, 71084.0], [91.3, 71102.0], [91.4, 71124.0], [91.5, 71129.0], [91.6, 71131.0], [91.7, 71139.0], [91.8, 71145.0], [91.9, 71150.0], [92.0, 71166.0], [92.1, 71189.0], [92.2, 71192.0], [92.3, 71194.0], [92.4, 71194.0], [92.5, 71200.0], [92.6, 71210.0], [92.7, 71210.0], [92.8, 71211.0], [92.9, 71229.0], [93.0, 71233.0], [93.1, 71239.0], [93.2, 71251.0], [93.3, 71253.0], [93.4, 71260.0], [93.5, 71263.0], [93.6, 71265.0], [93.7, 71266.0], [93.8, 71275.0], [93.9, 71281.0], [94.0, 71285.0], [94.1, 71288.0], [94.2, 71288.0], [94.3, 71295.0], [94.4, 71298.0], [94.5, 71301.0], [94.6, 71309.0], [94.7, 71309.0], [94.8, 71313.0], [94.9, 71327.0], [95.0, 71332.0], [95.1, 71347.0], [95.2, 71353.0], [95.3, 71358.0], [95.4, 71368.0], [95.5, 71374.0], [95.6, 71376.0], [95.7, 71386.0], [95.8, 71387.0], [95.9, 71391.0], [96.0, 71392.0], [96.1, 71397.0], [96.2, 71406.0], [96.3, 71418.0], [96.4, 71420.0], [96.5, 71420.0], [96.6, 71436.0], [96.7, 71442.0], [96.8, 71465.0], [96.9, 71474.0], [97.0, 71509.0], [97.1, 71517.0], [97.2, 71525.0], [97.3, 71540.0], [97.4, 71545.0], [97.5, 71546.0], [97.6, 71594.0], [97.7, 71618.0], [97.8, 71621.0], [97.9, 72102.0], [98.0, 72523.0], [98.1, 72587.0], [98.2, 72601.0], [98.3, 72630.0], [98.4, 72663.0], [98.5, 72676.0], [98.6, 72693.0], [98.7, 72729.0], [98.8, 72761.0], [98.9, 72772.0], [99.0, 72774.0], [99.1, 72781.0], [99.2, 72816.0], [99.3, 72839.0], [99.4, 72845.0], [99.5, 72885.0], [99.6, 72891.0], [99.7, 72900.0], [99.8, 72948.0], [99.9, 72982.0], [100.0, 73137.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 39.0, "series": [{"data": [[0.0, 3.0], [70700.0, 2.0], [71500.0, 8.0], [73100.0, 1.0], [100.0, 13.0], [33300.0, 1.0], [33700.0, 1.0], [34500.0, 1.0], [36100.0, 1.0], [36900.0, 1.0], [37700.0, 16.0], [38500.0, 3.0], [38900.0, 9.0], [40500.0, 1.0], [42100.0, 1.0], [43700.0, 8.0], [44500.0, 3.0], [44900.0, 13.0], [46100.0, 2.0], [46900.0, 2.0], [48100.0, 2.0], [48900.0, 1.0], [49700.0, 7.0], [50500.0, 4.0], [50900.0, 9.0], [51700.0, 2.0], [52100.0, 2.0], [52900.0, 1.0], [200.0, 16.0], [54900.0, 1.0], [55300.0, 1.0], [55700.0, 2.0], [56100.0, 3.0], [56500.0, 12.0], [57300.0, 2.0], [71400.0, 9.0], [300.0, 39.0], [400.0, 2.0], [600.0, 1.0], [1500.0, 2.0], [2000.0, 1.0], [3100.0, 1.0], [70500.0, 1.0], [71300.0, 18.0], [72100.0, 1.0], [72900.0, 3.0], [5800.0, 1.0], [6400.0, 3.0], [6500.0, 3.0], [6600.0, 14.0], [6700.0, 10.0], [6800.0, 11.0], [6900.0, 22.0], [7000.0, 21.0], [7100.0, 4.0], [7200.0, 1.0], [7300.0, 2.0], [7400.0, 3.0], [8400.0, 1.0], [9300.0, 1.0], [11700.0, 1.0], [12000.0, 1.0], [12600.0, 5.0], [12500.0, 2.0], [12400.0, 2.0], [12700.0, 2.0], [12300.0, 1.0], [13000.0, 23.0], [13100.0, 20.0], [12900.0, 7.0], [12800.0, 1.0], [13200.0, 12.0], [13300.0, 2.0], [13500.0, 2.0], [13400.0, 5.0], [13800.0, 9.0], [13600.0, 2.0], [13900.0, 2.0], [14000.0, 1.0], [14100.0, 1.0], [15100.0, 1.0], [15900.0, 1.0], [16600.0, 1.0], [18600.0, 1.0], [18800.0, 7.0], [19000.0, 20.0], [19200.0, 10.0], [19400.0, 1.0], [20000.0, 4.0], [20200.0, 2.0], [21800.0, 1.0], [22200.0, 1.0], [24200.0, 3.0], [24400.0, 1.0], [25000.0, 3.0], [25200.0, 7.0], [25400.0, 13.0], [25600.0, 8.0], [25800.0, 4.0], [26000.0, 1.0], [26200.0, 2.0], [26400.0, 1.0], [26800.0, 1.0], [27000.0, 1.0], [27600.0, 1.0], [28200.0, 1.0], [30000.0, 2.0], [31600.0, 1.0], [31000.0, 2.0], [31800.0, 22.0], [32000.0, 15.0], [32200.0, 1.0], [32400.0, 1.0], [32600.0, 4.0], [32800.0, 2.0], [34000.0, 1.0], [34400.0, 1.0], [36000.0, 1.0], [37600.0, 2.0], [38400.0, 2.0], [38800.0, 13.0], [39200.0, 3.0], [40000.0, 2.0], [40400.0, 1.0], [42000.0, 1.0], [43600.0, 2.0], [44000.0, 3.0], [44400.0, 3.0], [44800.0, 2.0], [45200.0, 1.0], [49600.0, 7.0], [50000.0, 2.0], [50400.0, 2.0], [50800.0, 7.0], [51200.0, 2.0], [52000.0, 3.0], [52800.0, 1.0], [54800.0, 1.0], [55200.0, 2.0], [55600.0, 4.0], [56000.0, 8.0], [56400.0, 6.0], [56800.0, 8.0], [57200.0, 3.0], [71200.0, 22.0], [72800.0, 5.0], [71100.0, 12.0], [72700.0, 6.0], [33100.0, 1.0], [33500.0, 1.0], [34300.0, 1.0], [34700.0, 1.0], [37900.0, 3.0], [38300.0, 11.0], [38700.0, 3.0], [39100.0, 1.0], [39500.0, 1.0], [40300.0, 1.0], [43100.0, 1.0], [43900.0, 12.0], [44700.0, 2.0], [44300.0, 2.0], [45100.0, 2.0], [45900.0, 5.0], [46700.0, 5.0], [49500.0, 12.0], [49900.0, 2.0], [50300.0, 1.0], [50700.0, 2.0], [51500.0, 2.0], [51900.0, 1.0], [55900.0, 12.0], [55500.0, 2.0], [56300.0, 6.0], [56700.0, 9.0], [57100.0, 5.0], [71000.0, 8.0], [72600.0, 5.0], [70900.0, 8.0], [72500.0, 2.0], [16700.0, 1.0], [18300.0, 1.0], [18700.0, 7.0], [18900.0, 11.0], [19100.0, 5.0], [19300.0, 12.0], [19500.0, 4.0], [20300.0, 3.0], [20100.0, 1.0], [20700.0, 1.0], [21700.0, 4.0], [23500.0, 1.0], [24500.0, 1.0], [24300.0, 2.0], [25100.0, 5.0], [25300.0, 17.0], [25500.0, 9.0], [25700.0, 4.0], [25900.0, 2.0], [26300.0, 1.0], [26500.0, 1.0], [27300.0, 1.0], [27900.0, 2.0], [28300.0, 2.0], [28500.0, 1.0], [30900.0, 2.0], [31500.0, 1.0], [31700.0, 2.0], [31100.0, 1.0], [31900.0, 11.0], [32100.0, 12.0], [32300.0, 3.0], [32500.0, 1.0], [32700.0, 3.0], [33000.0, 1.0], [34200.0, 1.0], [37800.0, 16.0], [38200.0, 1.0], [38600.0, 1.0], [39000.0, 2.0], [39800.0, 1.0], [40600.0, 1.0], [43800.0, 11.0], [44200.0, 1.0], [44600.0, 5.0], [45000.0, 4.0], [45800.0, 3.0], [46200.0, 1.0], [46600.0, 2.0], [49800.0, 8.0], [50600.0, 3.0], [51000.0, 6.0], [51800.0, 1.0], [52200.0, 1.0], [54200.0, 2.0], [55400.0, 1.0], [55800.0, 7.0], [56200.0, 1.0], [56600.0, 8.0], [57400.0, 1.0], [70800.0, 6.0], [71600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 73100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1006.0, "series": [{"data": [[0.0, 70.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1006.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 54.89655172413791, "minX": 1.61020386E12, "maxY": 535.2408602150546, "series": [{"data": [[1.61020398E12, 54.89655172413791], [1.61020392E12, 535.2408602150546], [1.61020386E12, 349.2]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61020398E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 276.1, "minX": 1.0, "maxY": 73137.0, "series": [{"data": [[2.0, 72663.0], [3.0, 72676.0], [4.0, 72982.0], [5.0, 72729.0], [6.0, 73137.0], [7.0, 72774.0], [8.0, 72900.0], [9.0, 72630.0], [10.0, 72948.0], [11.0, 72891.0], [12.0, 72587.0], [13.0, 72601.0], [14.0, 72693.0], [15.0, 72839.0], [16.0, 72781.0], [17.0, 72816.0], [18.0, 72885.0], [19.0, 72845.0], [20.0, 72761.0], [21.0, 72523.0], [22.0, 72772.0], [23.0, 72729.0], [24.0, 72102.0], [25.0, 71239.0], [27.0, 71318.0], [30.0, 71240.0], [31.0, 71376.0], [33.0, 71368.0], [35.0, 71210.0], [34.0, 71411.5], [37.0, 71581.5], [38.0, 71233.0], [40.0, 71389.0], [43.0, 71478.25], [44.0, 23805.666666666668], [45.0, 71465.0], [47.0, 71525.0], [46.0, 71313.0], [48.0, 35672.0], [51.0, 71418.0], [50.0, 71346.0], [53.0, 71206.0], [52.0, 71332.0], [54.0, 71411.0], [57.0, 71397.33333333333], [59.0, 71263.0], [61.0, 71594.0], [63.0, 71397.0], [62.0, 71385.0], [67.0, 71124.0], [66.0, 71503.66666666667], [71.0, 71265.0], [70.0, 71084.0], [69.0, 71309.0], [68.0, 71288.0], [74.0, 71386.0], [73.0, 71281.0], [72.0, 71295.0], [79.0, 71392.0], [78.0, 71229.0], [77.0, 71192.0], [76.0, 71267.5], [83.0, 71347.0], [82.0, 71194.0], [81.0, 71374.0], [80.0, 71251.0], [87.0, 71166.0], [86.0, 71045.0], [85.0, 71139.0], [84.0, 71150.0], [91.0, 71061.0], [90.0, 71053.0], [89.0, 71301.0], [88.0, 71210.0], [95.0, 71128.5], [93.0, 71266.0], [92.0, 71189.0], [99.0, 71260.0], [98.0, 71145.0], [97.0, 71028.0], [103.0, 70984.0], [102.0, 70955.0], [101.0, 70940.0], [100.0, 70883.0], [107.0, 71131.0], [106.0, 70908.0], [105.0, 70849.0], [104.0, 70965.0], [111.0, 70930.5], [109.0, 70880.0], [108.0, 71102.0], [115.0, 70743.0], [114.0, 70915.5], [112.0, 71012.0], [119.0, 70553.0], [118.0, 70733.0], [117.0, 70836.0], [116.0, 71037.0], [123.0, 57324.0], [122.0, 331.2400000000001], [121.0, 324.0], [120.0, 330.0], [127.0, 57147.0], [126.0, 57156.0], [125.0, 57322.0], [124.0, 29428.5], [135.0, 56686.0], [134.0, 35329.5], [133.0, 57158.0], [132.0, 57106.0], [131.0, 57452.0], [130.0, 57186.0], [129.0, 57244.0], [128.0, 31572.0], [143.0, 56598.0], [142.0, 56568.0], [141.0, 56762.0], [140.0, 56656.0], [139.0, 56654.0], [137.0, 56779.0], [136.0, 56814.0], [150.0, 56491.0], [149.0, 56498.0], [148.0, 56531.0], [147.0, 56560.0], [146.0, 56741.0], [145.0, 56577.0], [144.0, 56599.0], [159.0, 56842.0], [158.0, 56709.0], [157.0, 56585.0], [156.0, 56818.0], [155.0, 56823.0], [154.0, 56791.0], [153.0, 56855.0], [166.0, 56579.0], [165.0, 56700.0], [164.0, 56656.0], [163.0, 56669.0], [162.0, 56718.0], [161.0, 56854.0], [160.0, 56388.0], [175.0, 56559.0], [174.0, 56457.0], [173.0, 56530.0], [172.0, 56862.0], [171.0, 56577.0], [170.0, 56525.0], [169.0, 56605.0], [168.0, 56589.0], [183.0, 56283.0], [182.0, 56362.0], [181.0, 56353.0], [180.0, 56341.0], [179.0, 56376.0], [178.0, 56416.0], [177.0, 56495.0], [176.0, 56478.0], [191.0, 55956.0], [190.0, 55993.0], [189.0, 55951.0], [188.0, 56045.0], [187.0, 56100.0], [186.0, 56041.0], [185.0, 56002.0], [184.0, 56144.0], [199.0, 55905.0], [198.0, 55990.0], [197.0, 56113.0], [196.0, 55972.0], [195.0, 56096.0], [194.0, 55906.0], [193.0, 56022.0], [192.0, 56079.0], [207.0, 55702.0], [206.0, 55954.0], [205.0, 55925.0], [204.0, 56077.0], [203.0, 55946.0], [202.0, 55811.0], [201.0, 55873.0], [200.0, 55895.0], [215.0, 55856.0], [214.0, 55685.0], [213.0, 37075.0], [212.0, 55609.0], [211.0, 55615.0], [210.0, 55890.0], [209.0, 56063.0], [208.0, 55840.0], [223.0, 55315.0], [222.0, 55948.0], [221.0, 55626.0], [220.0, 55415.0], [219.0, 55942.0], [218.0, 55520.0], [217.0, 55635.0], [231.0, 52872.0], [230.0, 52958.0], [229.0, 54297.0], [228.0, 54201.0], [227.0, 54977.0], [226.0, 54867.0], [225.0, 55216.0], [224.0, 55288.0], [239.0, 51935.0], [238.0, 51870.0], [237.0, 52061.0], [236.0, 52040.0], [235.0, 52055.0], [234.0, 52137.0], [233.0, 52164.0], [232.0, 52262.0], [247.0, 51240.0], [246.0, 51240.0], [245.0, 50978.0], [244.0, 50993.0], [243.0, 32453.0], [242.0, 51570.0], [241.0, 51731.0], [240.0, 51776.0], [255.0, 51065.0], [254.0, 50892.0], [253.0, 50945.0], [252.0, 50939.0], [251.0, 51062.0], [250.0, 50989.0], [249.0, 51002.0], [248.0, 51066.0], [270.0, 50629.0], [271.0, 50663.0], [269.0, 50701.0], [268.0, 50765.0], [267.0, 50832.0], [266.0, 50930.0], [265.0, 50858.0], [264.0, 50892.0], [263.0, 50888.0], [257.0, 50868.0], [256.0, 50916.0], [259.0, 51045.0], [258.0, 51032.0], [262.0, 50907.0], [261.0, 50828.0], [260.0, 50966.0], [285.0, 49748.0], [286.0, 49803.0], [284.0, 49850.0], [275.0, 50466.0], [273.0, 50663.0], [272.0, 50517.0], [283.0, 49873.0], [282.0, 49878.0], [281.0, 50003.0], [280.0, 50012.0], [279.0, 50521.0], [278.0, 50347.0], [277.0, 50555.0], [276.0, 50551.0], [302.0, 49705.0], [303.0, 49581.0], [301.0, 49565.0], [300.0, 49553.0], [299.0, 49589.0], [298.0, 49610.0], [297.0, 49806.0], [296.0, 49613.0], [295.0, 49806.0], [289.0, 49940.0], [288.0, 49898.5], [291.0, 49801.0], [290.0, 49776.0], [294.0, 49757.0], [293.0, 49711.0], [292.0, 49734.0], [318.0, 48983.0], [319.0, 48163.0], [317.0, 49640.0], [316.0, 49516.0], [315.0, 49683.0], [314.0, 49519.0], [313.0, 49532.0], [312.0, 49592.5], [310.0, 49516.0], [305.0, 49543.0], [304.0, 49736.0], [307.0, 49565.0], [306.0, 49683.0], [309.0, 49644.0], [308.0, 49544.0], [334.0, 45923.0], [335.0, 46199.0], [333.0, 45920.0], [332.0, 45972.0], [331.0, 45897.0], [330.0, 45962.0], [329.0, 46639.0], [328.0, 46601.0], [327.0, 46746.0], [321.0, 46957.0], [320.0, 48122.0], [323.0, 46901.0], [322.0, 46766.0], [326.0, 46734.0], [325.0, 46721.0], [324.0, 46793.0], [350.0, 44902.0], [351.0, 44947.0], [349.0, 45112.0], [348.0, 44967.0], [347.0, 44991.0], [346.0, 44930.0], [345.0, 45097.0], [344.0, 45098.0], [343.0, 44907.0], [337.0, 46220.0], [336.0, 46187.0], [339.0, 45894.0], [338.0, 45932.0], [342.0, 45106.0], [341.0, 45236.0], [340.0, 45877.0], [366.0, 44647.0], [367.0, 44654.0], [365.0, 44633.0], [364.0, 44631.0], [363.0, 44902.0], [362.0, 44915.0], [361.0, 44923.0], [360.0, 44768.0], [359.0, 44946.0], [353.0, 44886.0], [352.0, 44959.0], [355.0, 45025.0], [354.0, 44943.0], [358.0, 45013.0], [357.0, 44880.0], [356.0, 44911.0], [382.0, 43730.0], [383.0, 43790.0], [381.0, 43764.0], [380.0, 43899.0], [379.0, 44241.0], [378.0, 43859.0], [377.0, 44516.0], [376.0, 44707.0], [375.0, 44526.0], [369.0, 44440.0], [368.0, 44446.0], [371.0, 44472.0], [370.0, 44646.0], [374.0, 44393.0], [373.0, 44364.0], [372.0, 44512.0], [398.0, 43942.0], [399.0, 43820.0], [397.0, 43901.0], [396.0, 43916.0], [395.0, 43843.0], [394.0, 43954.0], [393.0, 43924.0], [392.0, 43991.0], [391.0, 43986.0], [385.0, 43859.0], [384.0, 43799.0], [387.0, 43687.0], [386.0, 28188.5], [390.0, 44018.0], [389.0, 43825.0], [388.0, 43779.0], [414.0, 43605.0], [415.0, 43107.0], [413.0, 43798.0], [412.0, 43780.0], [411.0, 43932.0], [410.0, 43837.0], [409.0, 43968.0], [408.0, 43769.0], [407.0, 43969.0], [401.0, 43885.0], [400.0, 43884.0], [403.0, 43828.0], [402.0, 44006.0], [406.0, 44000.0], [405.0, 43921.0], [404.0, 43803.0], [430.0, 39077.0], [431.0, 38995.0], [429.0, 39052.0], [428.0, 39241.0], [427.0, 39250.0], [426.0, 39270.0], [425.0, 39568.0], [424.0, 39875.0], [423.0, 40055.0], [417.0, 42017.0], [416.0, 42130.0], [419.0, 40563.0], [418.0, 40683.0], [422.0, 40044.0], [421.0, 40382.0], [420.0, 40491.0], [444.0, 38917.5], [446.0, 38819.0], [447.0, 38898.0], [445.0, 38918.0], [442.0, 39008.0], [440.0, 38865.0], [439.0, 38903.0], [433.0, 38926.0], [432.0, 38948.0], [435.0, 38872.0], [434.0, 38946.0], [438.0, 38832.0], [437.0, 38852.0], [436.0, 38901.0], [462.0, 38336.0], [463.0, 38570.0], [461.0, 38390.0], [460.0, 38457.0], [459.0, 38431.0], [458.0, 38374.0], [457.0, 38584.0], [456.0, 38812.0], [455.0, 38669.0], [449.0, 38861.0], [448.0, 38860.0], [451.0, 38784.0], [450.0, 38742.0], [454.0, 38800.0], [453.0, 38820.0], [452.0, 38740.0], [478.0, 37799.0], [479.0, 37782.0], [477.0, 37826.0], [476.0, 37836.0], [475.0, 38268.0], [474.0, 37835.0], [473.0, 37830.0], [472.0, 25369.0], [471.0, 38339.0], [465.0, 38359.0], [464.0, 38327.0], [467.0, 38318.0], [466.0, 38554.0], [470.0, 38306.0], [469.0, 38355.0], [468.0, 38396.0], [494.0, 37867.0], [495.0, 37800.0], [492.0, 37791.0], [483.0, 37848.0], [482.0, 37808.0], [481.0, 37872.0], [480.0, 37791.0], [491.0, 37758.0], [490.0, 37963.0], [489.0, 37918.0], [487.0, 37799.0], [486.0, 37833.0], [485.0, 37828.0], [484.0, 37754.0], [510.0, 37665.0], [511.0, 36967.0], [509.0, 37723.0], [508.0, 37731.0], [507.0, 37729.0], [506.0, 37644.0], [505.0, 37756.0], [504.0, 37864.0], [503.0, 37871.0], [497.0, 37814.0], [496.0, 37808.0], [499.0, 37769.0], [498.0, 37783.0], [502.0, 37770.0], [501.0, 37870.0], [500.0, 37747.0], [537.0, 32304.0], [541.0, 32181.0], [542.0, 32149.0], [529.0, 32715.0], [528.0, 32784.0], [531.0, 32689.0], [530.0, 32685.0], [533.0, 32661.0], [532.0, 32682.0], [540.0, 32227.0], [539.0, 32181.0], [538.0, 32387.0], [536.0, 32482.0], [519.0, 34050.0], [518.0, 34247.0], [517.0, 34395.0], [516.0, 34530.0], [515.0, 34479.0], [514.0, 34753.0], [513.0, 36067.0], [512.0, 36173.0], [527.0, 32796.0], [526.0, 32823.0], [525.0, 32825.0], [524.0, 33388.0], [523.0, 33081.0], [522.0, 33165.0], [521.0, 33596.0], [520.0, 33784.0], [535.0, 32369.0], [534.0, 32579.0], [572.0, 32038.0], [575.0, 31839.0], [561.0, 32140.0], [560.0, 32145.0], [563.0, 31873.0], [562.0, 32077.0], [565.0, 32042.0], [564.0, 31851.0], [574.0, 32010.0], [573.0, 31811.0], [571.0, 31873.0], [570.0, 31931.0], [569.0, 31949.0], [568.0, 32028.0], [559.0, 32100.0], [545.0, 32088.0], [544.0, 32102.5], [549.0, 32053.0], [547.0, 32061.5], [551.0, 32123.0], [550.0, 24424.5], [558.0, 31945.0], [557.0, 32101.0], [556.0, 32089.0], [555.0, 32094.0], [554.0, 32038.0], [553.0, 32100.0], [552.0, 32047.0], [567.0, 31875.0], [566.0, 32094.0], [601.0, 30939.0], [606.0, 31640.0], [607.0, 31509.0], [593.0, 31868.0], [592.0, 31902.0], [595.0, 31856.0], [594.0, 31821.0], [597.0, 31834.0], [596.0, 31846.0], [605.0, 31708.0], [604.0, 31806.5], [602.0, 31820.0], [600.0, 31789.0], [583.0, 31963.0], [582.0, 31520.5], [581.0, 31942.0], [580.0, 31893.0], [579.0, 31906.0], [578.0, 31111.0], [576.0, 31993.0], [591.0, 31862.0], [589.0, 31882.0], [588.0, 31088.0], [587.0, 31889.5], [599.0, 31823.0], [598.0, 31842.0], [636.0, 25640.0], [614.0, 15209.5], [613.0, 28235.0], [612.0, 28397.0], [611.0, 28530.0], [610.0, 30062.0], [609.0, 30084.0], [608.0, 30949.0], [615.0, 27960.0], [623.0, 26213.0], [622.0, 26381.0], [621.0, 26592.0], [620.0, 26645.5], [619.0, 27018.0], [618.0, 27310.0], [617.0, 27633.0], [616.0, 27933.0], [639.0, 25565.0], [625.0, 25862.0], [624.0, 26200.0], [627.0, 25867.0], [626.0, 26060.0], [629.0, 25948.0], [628.0, 25938.0], [631.0, 25867.0], [630.0, 25758.0], [638.0, 25711.0], [637.0, 25646.0], [635.0, 25735.0], [634.0, 25648.0], [633.0, 25672.0], [632.0, 25863.0], [668.0, 25220.0], [671.0, 25232.0], [657.0, 25375.0], [656.0, 25392.0], [659.0, 25516.0], [658.0, 25342.0], [661.0, 25528.0], [660.0, 25339.0], [670.0, 25431.0], [669.0, 25469.0], [667.0, 25240.0], [666.0, 25411.0], [665.0, 25365.0], [664.0, 25471.0], [655.0, 25421.0], [641.0, 25598.0], [640.0, 25734.0], [643.0, 25664.0], [642.0, 25575.0], [645.0, 25547.0], [644.0, 25643.0], [647.0, 25619.0], [646.0, 25648.0], [654.0, 25460.0], [653.0, 25425.0], [652.0, 25489.0], [651.0, 25533.0], [650.0, 25485.0], [649.0, 25553.0], [648.0, 25562.0], [663.0, 25443.0], [662.0, 25485.0], [700.0, 25103.0], [703.0, 24381.0], [688.0, 25356.0], [690.0, 25095.0], [689.0, 25348.0], [693.0, 24874.0], [691.0, 25336.0], [702.0, 25041.0], [701.0, 25045.0], [699.0, 24217.0], [698.0, 24222.0], [697.0, 24338.0], [696.0, 25162.0], [687.0, 25144.0], [673.0, 25353.0], [672.0, 25347.0], [675.0, 25377.0], [674.0, 25260.0], [677.0, 25423.0], [676.0, 25326.0], [679.0, 25420.0], [678.0, 25310.0], [686.0, 25275.0], [685.0, 25280.0], [683.0, 25176.0], [682.0, 25305.0], [681.0, 25286.0], [695.0, 24235.0], [694.0, 25342.0], [732.0, 19383.0], [735.0, 19303.0], [721.0, 20352.0], [720.0, 20050.0], [723.0, 19572.0], [722.0, 20015.0], [725.0, 19534.0], [724.0, 19547.0], [734.0, 19334.0], [733.0, 19344.0], [731.0, 19353.0], [730.0, 19368.0], [729.0, 19372.0], [728.0, 19394.0], [719.0, 20065.0], [705.0, 23544.0], [704.0, 24554.0], [707.0, 21834.0], [706.0, 22259.0], [709.0, 21778.0], [708.0, 21787.0], [711.0, 21732.0], [710.0, 21729.0], [718.0, 20087.0], [717.0, 20142.0], [716.0, 20265.0], [715.0, 20274.0], [714.0, 20347.0], [713.0, 20354.0], [712.0, 20711.0], [727.0, 19466.0], [726.0, 19531.0], [761.0, 19036.0], [766.0, 19055.0], [767.0, 19058.0], [753.0, 19130.0], [752.0, 19136.0], [755.0, 19081.0], [754.0, 19105.0], [757.0, 19056.0], [756.0, 19086.0], [765.0, 19025.0], [764.0, 19046.5], [762.0, 19048.0], [760.0, 19039.0], [743.0, 19328.0], [742.0, 19274.0], [741.0, 19278.0], [740.0, 19294.0], [739.0, 19330.5], [737.0, 19300.0], [736.0, 19309.0], [751.0, 19143.0], [750.0, 19152.0], [749.0, 19249.0], [748.0, 19275.0], [747.0, 19291.0], [746.0, 19247.0], [745.0, 19264.0], [744.0, 19274.0], [759.0, 19063.0], [758.0, 19052.0], [794.0, 18795.0], [798.0, 18740.0], [799.0, 18742.0], [785.0, 18920.0], [784.0, 18943.0], [787.0, 18893.0], [786.0, 18890.0], [789.0, 18862.0], [788.0, 18890.0], [797.0, 18717.0], [796.0, 18773.0], [795.0, 18798.0], [792.0, 18830.0], [775.0, 19000.0], [774.0, 19000.0], [773.0, 18981.5], [771.0, 19025.0], [770.0, 19010.0], [769.0, 19001.0], [768.0, 19004.0], [783.0, 18943.0], [782.0, 18957.0], [780.0, 18959.0], [779.0, 18977.0], [778.0, 18986.0], [777.0, 19001.0], [776.0, 18983.0], [791.0, 18832.0], [790.0, 18833.0], [828.0, 13174.0], [831.0, 13180.0], [817.0, 13802.0], [816.0, 13558.0], [819.0, 13425.0], [818.0, 13447.0], [821.0, 13393.0], [820.0, 13431.0], [830.0, 13208.0], [829.0, 13230.0], [827.0, 13226.0], [826.0, 13211.0], [825.0, 13193.0], [824.0, 13265.0], [815.0, 13607.0], [801.0, 16711.0], [800.0, 17274.0], [803.0, 14152.0], [802.0, 15175.0], [805.0, 13929.0], [804.0, 14070.0], [807.0, 13884.0], [806.0, 13954.0], [814.0, 13619.0], [813.0, 13835.0], [812.0, 13811.0], [811.0, 13849.0], [810.0, 13853.0], [809.0, 13861.0], [808.0, 13847.0], [823.0, 13325.0], [822.0, 13405.0], [860.0, 13064.0], [863.0, 13583.0], [848.0, 12998.0], [850.0, 13052.0], [849.0, 12973.0], [852.0, 13047.0], [851.0, 13002.0], [862.0, 13043.0], [861.0, 13044.0], [859.0, 13042.0], [858.0, 13238.0], [857.0, 13026.0], [856.0, 13046.0], [847.0, 12987.0], [833.0, 13172.0], [832.0, 13203.0], [835.0, 13167.0], [834.0, 13220.0], [837.0, 13186.0], [836.0, 13189.0], [839.0, 13180.0], [838.0, 13188.0], [846.0, 13008.0], [845.0, 12985.0], [844.0, 13011.0], [843.0, 13079.0], [842.0, 13145.0], [841.0, 13172.0], [840.0, 13175.0], [854.0, 13099.0], [853.0, 13059.0], [892.0, 12657.0], [895.0, 12450.0], [881.0, 12903.0], [880.0, 13092.0], [883.0, 12875.0], [882.0, 13063.0], [885.0, 13019.0], [884.0, 12990.0], [894.0, 12597.0], [893.0, 12673.0], [891.0, 12676.0], [890.0, 12685.0], [889.0, 13004.0], [888.0, 12700.0], [879.0, 13115.0], [865.0, 13068.0], [864.0, 13212.0], [867.0, 13210.0], [866.0, 13033.0], [869.0, 13186.0], [868.0, 13006.0], [871.0, 13201.0], [870.0, 13047.0], [878.0, 13114.0], [877.0, 12930.0], [876.0, 13179.0], [875.0, 13137.0], [874.0, 13144.0], [873.0, 13176.0], [872.0, 13202.0], [887.0, 12709.0], [886.0, 13154.0], [924.0, 7093.0], [927.0, 7095.0], [913.0, 6906.0], [912.0, 7192.0], [915.0, 6873.0], [914.0, 6909.0], [917.0, 7147.0], [916.0, 6858.0], [926.0, 7090.0], [925.0, 6828.0], [923.0, 6842.0], [922.0, 6849.0], [921.0, 6848.0], [920.0, 6849.0], [911.0, 7213.0], [897.0, 12682.0], [896.0, 12584.0], [899.0, 11748.0], [898.0, 12065.0], [901.0, 8415.0], [900.0, 9382.0], [903.0, 7442.0], [902.0, 7478.0], [910.0, 6972.0], [909.0, 6994.0], [908.0, 7024.0], [907.0, 7038.0], [906.0, 7309.0], [905.0, 7357.0], [904.0, 7435.0], [919.0, 7104.0], [918.0, 7109.0], [956.0, 6987.0], [959.0, 6871.0], [944.0, 6671.0], [946.0, 7055.0], [945.0, 7016.0], [948.0, 6978.0], [947.0, 7063.0], [958.0, 7000.0], [957.0, 6910.0], [955.0, 6993.0], [954.0, 6942.0], [953.0, 7036.0], [952.0, 6971.0], [943.0, 6955.0], [929.0, 7043.0], [928.0, 7022.0], [931.0, 6988.0], [930.0, 7015.0], [933.0, 7002.0], [932.0, 7086.0], [935.0, 6723.0], [934.0, 7056.0], [942.0, 6678.0], [941.0, 6934.0], [940.0, 6963.0], [939.0, 7058.0], [938.0, 7049.0], [937.0, 7088.0], [936.0, 6984.0], [951.0, 6953.5], [949.0, 7037.0], [985.0, 6554.0], [990.0, 6667.0], [991.0, 6620.0], [976.0, 6733.0], [978.0, 6730.0], [977.0, 6717.0], [989.0, 6672.0], [987.0, 6648.0], [986.0, 6674.0], [984.0, 6712.0], [967.0, 6914.0], [966.0, 6921.0], [965.0, 6948.0], [964.0, 6938.0], [963.0, 6986.0], [962.0, 6873.0], [961.0, 6858.0], [960.0, 7014.0], [975.0, 6715.0], [974.0, 6739.0], [973.0, 6757.0], [972.0, 6622.0], [971.0, 6616.0], [970.0, 6778.0], [969.0, 6688.0], [968.0, 6807.0], [983.0, 6700.0], [982.0, 6692.0], [981.0, 6620.5], [979.0, 6695.0], [996.0, 3198.0], [995.0, 6450.0], [994.0, 6489.0], [992.0, 6512.0], [1.0, 276.1]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[469.8879629629641, 34014.1175925926]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 996.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11.833333333333334, "minX": 1.61020386E12, "maxY": 7610605.566666666, "series": [{"data": [[1.61020398E12, 1186566.4166666667], [1.61020392E12, 7610605.566666666], [1.61020386E12, 16817.583333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61020398E12, 343.1666666666667], [1.61020392E12, 2201.0], [1.61020386E12, 11.833333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61020398E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1103.0, "minX": 1.61020386E12, "maxY": 58746.10344827589, "series": [{"data": [[1.61020398E12, 58746.10344827589], [1.61020392E12, 30334.996774193536], [1.61020386E12, 1103.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61020398E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1096.6, "minX": 1.61020386E12, "maxY": 58690.075862068974, "series": [{"data": [[1.61020398E12, 58690.075862068974], [1.61020392E12, 30322.067741935483], [1.61020386E12, 1096.6]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61020398E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.61020386E12, "maxY": 52797.448275862065, "series": [{"data": [[1.61020398E12, 52797.448275862065], [1.61020392E12, 14493.381720430101], [1.61020386E12, 0.4]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61020398E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 159.0, "minX": 1.61020386E12, "maxY": 73137.0, "series": [{"data": [[1.61020398E12, 73137.0], [1.61020392E12, 57452.0], [1.61020386E12, 3198.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61020398E12, 72729.0], [1.61020392E12, 55700.3], [1.61020386E12, 3198.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61020398E12, 73065.7], [1.61020392E12, 57153.21], [1.61020386E12, 3198.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61020398E12, 72843.2], [1.61020392E12, 56530.45], [1.61020386E12, 3198.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61020398E12, 159.0], [1.61020392E12, 270.0], [1.61020386E12, 2097.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61020398E12, 71253.0], [1.61020392E12, 31858.5], [1.61020386E12, 2647.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61020398E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 66.0, "minX": 1.0, "maxY": 72766.5, "series": [{"data": [[2.0, 36570.0], [35.0, 44902.0], [37.0, 37808.0], [38.0, 43871.5], [49.0, 19133.0], [3.0, 52872.0], [48.0, 56713.5], [56.0, 32038.0], [58.0, 55964.0], [4.0, 33600.5], [69.0, 6910.0], [68.0, 13126.0], [71.0, 71194.0], [72.0, 25395.0], [5.0, 10986.5], [6.0, 14132.0], [7.0, 34247.0], [8.0, 401.0], [9.0, 335.0], [10.0, 10205.0], [11.0, 13046.0], [12.0, 33276.5], [13.0, 46199.0], [1.0, 15175.0], [18.0, 13841.0], [20.0, 31822.0], [21.0, 50978.0], [24.0, 72766.5], [25.0, 7038.0], [26.0, 60500.0], [28.0, 50404.5], [30.0, 19318.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 66.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 66.0, "minX": 1.0, "maxY": 72747.5, "series": [{"data": [[2.0, 36561.0], [35.0, 44889.0], [37.0, 37798.0], [38.0, 43856.5], [49.0, 19124.0], [3.0, 52865.0], [48.0, 56689.5], [56.0, 32030.5], [58.0, 55955.0], [4.0, 33589.0], [69.0, 6893.0], [68.0, 13108.0], [71.0, 71138.0], [72.0, 25384.0], [5.0, 10953.0], [6.0, 14122.0], [7.0, 34240.0], [8.0, 388.5], [9.0, 324.0], [10.0, 10189.0], [11.0, 13034.5], [12.0, 33267.5], [13.0, 46192.0], [1.0, 15164.0], [18.0, 13832.0], [20.0, 31810.5], [21.0, 50963.0], [24.0, 72747.5], [25.0, 7030.0], [26.0, 60405.5], [28.0, 50394.5], [30.0, 19307.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 66.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.61020386E12, "maxY": 16.666666666666668, "series": [{"data": [[1.61020398E12, 0.38333333333333336], [1.61020392E12, 0.95], [1.61020386E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61020398E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.61020386E12, "maxY": 15.5, "series": [{"data": [[1.61020398E12, 2.4166666666666665], [1.61020392E12, 15.5], [1.61020386E12, 0.03333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61020386E12, 0.05]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61020398E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.61020386E12, "maxY": 15.5, "series": [{"data": [[1.61020386E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.61020398E12, 2.4166666666666665], [1.61020392E12, 15.5], [1.61020386E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61020398E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.61020386E12, "maxY": 15.5, "series": [{"data": [[1.61020398E12, 2.4166666666666665], [1.61020392E12, 15.5], [1.61020386E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61020386E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61020398E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

